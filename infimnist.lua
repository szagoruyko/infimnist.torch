local C = infimnist.C
local ffi = require 'ffi'

local InfiMnist = torch.class('infimnist.InfiMnist')

function InfiMnist:__init(path)
  self.handle = C['infimnist_create'](path)
  local function destroyHandle(h)
    C['infimnist_destroy'](h)
  end
  ffi.gc(self.handle, destroyHandle)
  self.sample = torch.ByteTensor(28,28)
end

function InfiMnist:clearCache()
  C['infimnist_cache_clear'](self.handle)
end

--[[
    - The examples numbered 0 to 9999 are the standard MNIST testing examples.
    - The examples numbered 10000 to 69999 are the standard MNIST training examples.
   Each example with indice i greater than 69999 is generated by applying a pseudo-random
   transformation to the MNIST training example numbered 10000+((i-10000)%60000).
--]]
function InfiMnist:getSample(seed)
  local p = C['infimnist_get_pattern'](self.handle, seed)
  local label = C['infimnist_get_label'](self.handle, seed)
  ffi.copy(self.sample:data(), p, 28*28*ffi.sizeof('char'))
  return self.sample, label
end
